%info
Running the experiments for PacketMill paper

Copyright (c) 2020, Tom Barbette, KTH Royal Institute of Technology - All Rights Reserved
Copyright (c) 2020, Alireza Farshin, KTH Royal Institute of Technology - All Rights Reserved

%config
timeout=600

accept_zero={EL.*,EL,LLC-loads-*,LLC-load-misses-*}

graph_tick_params={direction:in,which:both,axis:both,grid_linestyle:dotted,bottom:true,top:true,right:true,left:true,grid_color:#444444}
graph_grid_linestyle=dotted
var_grid=True
var_names+={GEN_LENGTH:Packet Length (Bytes)}
var_names+={DPDK_CPU:Number of Cores}
var_lim+={result-THROUGHPUT:0-}

graph_series_sort=-avg

results_expect={THROUGHPUT}

%variables

// Number of CPU cores and Burst Size
CPU=1
DPDK_CPU=1
BURST=32
-iterative:IGNORE=1

// Default configurations for Compilation

REPLACE=1
DEVIRTUALIZE=1
INLINE=1
EMBED=1
MINDRIVER=1
OPT=0
STATIC=1
OPT_STRIP=0
OPT_PICK=0
TIMING=0
XCHG=0
ALIGN=0
ALIGN_SIZE=0
RAND_SEED=random
RAND_MAX=32
norand:RAND_SEED=0
norand:RAND_MAX=0
ids:CHKSUM=0
BOLT=0
LTOOPT=0
PACKETMILL_CMD=0

// BESS variables
bess:TOUCH=1

// BOLT variables
boltpgo:BOLT=1

// Multicore variables
scaling:DPDK_CPU={1,2,3,4}

// Alignment pass variables (for testing/debugging)

align:ALIGN=1
align:ALIGN_SIZE=[0*256]

// WorkPackage variables

wp:WP_S={0,4,8,12,16,20}
wp:WP_W={0,4,8,12,16,20}
wp:WP_N=5

// Frequency 

FREQ=2300
UNCORE_FREQ=24 // min is 12 (1.2GHz) and max is 24 (2.4GHz)
freqtune:FREQ={1200,1400,1600,1800,2000,2200,2400,2600,2800,3000}

// RX and TX descriptors + Blocking mode (generating traffic)
RXDESC=1024
TXDESC=1024
BLOCKING=true
CLEAR=0

// DDIO configuration
ddio_value=0x7F8 // 8 bits - default is 0x600 (2 bits)
uncoretune:UNCORE_FREQ={12,14,16,18,20,22,24}


// Rate variables (TIMING)
ratetune:TIMING={200,400,600,800,1000,1200,1400,1500,1600,1700,1800,1900,2000,2100,2200,0} // for normal trace
ratetune:FREQ=2300

// Default UDP packet size

GEN_LENGTH=64

// PASUE frames 
PAUSE=none
tunepause:PAUSE={none,full}

// Dual NIC experiment variables
dualNIC=0
dual:dualNIC=1
dual:FREQ=2300
dual:DPDK_CPU={1,2}

// X-Change configuration (can be combined with others)

xchg:XCHG=1

// Vanilla configuration (No optimization)

vanilla:REPLACE=0
vanilla:DEVIRTUALIZE=0
vanilla:INLINE=0
vanilla:EMBED=0
vanilla:MINDRIVER=0
vanilla:OPT=0
vanilla:STATIC=0
vanilla:UNROLL=0
vanilla:UNROLL_FACTOR=0
vanilla:SWITCH=0
vanilla:JMPS=0

// Devirtualize configuration


devir:REPLACE=0
devir:DEVIRTUALIZE=1
devir:INLINE=0
devir:EMBED=1
devir:MINDRIVER=1
devir:OPT=0
devir:STATIC=0
devir:UNROLL=0
devir:UNROLL_FACTOR=0
devir:SWITCH=0
devir:JMPS=0

// Embedding Costants configuration (--replace pass)

constants:REPLACE=1
constants:DEVIRTUALIZE=1
constants:INLINE=0
constants:EMBED=1
constants:MINDRIVER=1
constants:OPT=0
constants:STATIC=0
constants:UNROLL=0
constants:UNROLL_FACTOR=0
constants:SWITCH=0
constants:JMPS=0

// Embedding graph configuration (--static pass)

graph:REPLACE=0
graph:DEVIRTUALIZE=1
graph:INLINE=0
graph:EMBED=1
graph:MINDRIVER=1
graph:OPT=0
graph:STATIC=1
graph:UNROLL=0
graph:UNROLL_FACTOR=0
graph:SWITCH=0
graph:JMPS=0

// All optimizations configuration (--replace --static --inline pass)

embedding:REPLACE=1
embedding:DEVIRTUALIZE=1
embedding:INLINE=1
embedding:EMBED=1
embedding:MINDRIVER=1
embedding:OPT=0
embedding:STATIC=1
embedding:UNROLL=0
embedding:UNROLL_FACTOR=0
embedding:SWITCH=0
embedding:JMPS=0

// LLVM pass for click binary

clickopt:OPT=1
clickopt:OPT_PICK=1
clickopt:OPT_STRIP=1
clickopt:LTOOPT=1
clickopt:OPT_POOL_INLINE=1

clickoptO3:OPT=1
clickoptO3:OPT_PICK=0
clickoptO3:OPT_STRIP=1
clickoptO3:LTOOPT=1
clickoptO3:OPT_POOL_INLINE=1

packetmill:PACKETMILL_CMD=1
packetmill:REPLACE=0
packetmill:DEVIRTUALIZE=0
packetmill:INLINE=0
packetmill:EMBED=0
packetmill:MINDRIVER=0
packetmill:OPT=0
packetmill:STATIC=0
packetmill:UNROLL=0
packetmill:UNROLL_FACTOR=0
packetmill:SWITCH=0
packetmill:JMPS=0

//Vectorized or not
-novec:VEC=1


// DPDK example (l2fwd-xchg)

dpdk:COMP=0
dpdk:MPRQ=0 //This is not relevant

// Pass the gdb tags to run packetmill/click under gdb and see where things go bad
gdb:GDB=gdb -ex run -ex "signal 2" -ex bt -batch -args
profilepgo:PERF=perf record -b -o ${NPF_ROOT}/perf.data.pgo --
profilebolt:PERF=perf record -e cycles:u -j any,u -o ${NPF_ROOT}/perf.data.bolt -- 

// Pick main NF (router or forwarding)
fwd:FNT=Fwd
router:FNT=Router
noinline:NOINLINE=1

// NAT configuration

nat:NAT=1
nat:NAT_CAPA=10000000
vlan:VLAN=1
ids:IDS=1


// Perf variables
PERF_INTERVAL=100
PERF_OUTPUT=perf.csv
PERF_CORE=0 // For profiling
PERF_RUN_CORE=2 // For running the profiler


// PQOS variables
PQOS_OUTPUT=pqos.log
PQOS_MAX_CORE=1

//Variables supposed to be overriden (we do this to avoid the overriden message):
DUT_PMU_PATH=
DUT_BOLT_PATH=
DUT_AUTOFDO_PATH=
XCHG_PATH=
EXP_PATH=
LLVM_PASS_PATH=


//Generator configuration

//Record the latency of 1 packet every 100
SAMPLE=100

%dpdk:require
test -n "$TARGET"

%late_variables

scaling:CPU=EXPAND($DPDK_CPU)

WP=
wp:WP=EXPAND( -> WorkPackage(S $WP_S, N $WP_N, R 0, PAYLOAD false, W $WP_W) )

PERF_EVENTS=branches,branch-misses,cache-references,cache-misses,cycles,instructions,L1-dcache-load-misses,L1-dcache-loads,L1-dcache-stores,L1-icache-load-misses,LLC-load-misses,LLC-loads,LLC-stores,LLC-store-misses  //Add new events here

VEC=1
novec:MLX_OPT?=,rx_vec_en=0,rxq_cqe_comp_en=0,mprq_en=0
novec:VEC=0
xchg,-novec:MLX_OPT?=,rxq_cqe_comp_en=0
noinline:MLX_OPT+=,rxq_cqe_comp_en=0,mprq_en=0,txq_inline_max=0
MLX_OPT?=
GDB?=
PERF?=

INITVLAN=
SETVLAN=

vlan:INITVLAN=-> SetVLANAnno(0)
vlan:SETVLAN=-> VLANEncap(VLAN_TCI ANNO, VLAN_PCP 0)

FD?=$(( "FromDPDKDeviceXCHG" if $XCHG else "FromDPDKDevice" ))
TD?=$(( "ToDPDKDeviceXCHG" if $XCHG else "ToDPDKDevice" ))

%require
command -v opt &> /dev/null || ( echo "opt command not found!" && exit1 )

%require
test $STATIC -le $EMBED
test $STATIC -le $DEVIRTUALIZE
test $INLINE -le $DEVIRTUALIZE
//test $OPT -le $EMBED

%perf,-pqos:script@dut sudo=true name=profiler autokill=false waitfor=GEN_BEGIN delay=0

// Run Perf 
bash perf.sh

%perf,-pqos:script@dut sudo=true name=perf-parser autokill=true waitfor=GEN_DONE delay=0

// Processing Perf output
echo "Launching Perf script"
bash perf-processing.sh $PERF_OUTPUT


%perf,-pqos:file@dut perf.sh

#============================================================================================#
# perf.sh : Script to launch Perf
#============================================================================================#

echo "Launching Perf"
taskset -c $PERF_RUN_CORE perf stat -x\, -I $PERF_INTERVAL -e $PERF_EVENTS -C $PERF_CORE -o $PERF_OUTPUT sleep 1000

#============================================================================================#


%perf,-pqos:file@dut perf-processing.sh

#====================================================s========================================#
# perf-processing.sh : Script to process Perf output to get performance bottlenecks
#============================================================================================#

input_file=$1

# Create Event list
events="$PERF_EVENTS"
events_num=`echo $events | tr , "\n" | wc -l`
event_list=(`echo "\"RESULT-Timestamp\""` `echo $events | tr , "\n" | awk '{print "RESULT-"$1}' | paste -s -d" " -`)

# Event list: Will be updated automatically - Compare with tmp-perf.csv header if changing PERF_EVENTS
column_name=("${event_list[@]}")
column=$(seq 0 $events_num)

# Kill Perf
killall perf

# Remove the last line (uncomplete)
sed -i '$ d' $input_file

# Convert the CSV to a better format via interval-normalize.py
${DUT_PMU_PATH}/interval-normalize.py --na 0 $input_file -o tmp-perf.csv

# Print the results

for col in $column;do 
    # Average Value
    result=`cat tmp-perf.csv\
    | awk -F, -v awkcol=\$(($col + 1)) '{if (NR!=1) print $awkcol;}'\
    | awk '{ total +=$1;count++;} END{print total/count}'`
    echo ${column_name[$col]}"-avg-C"$PERF_CORE" "$result
done

rm -f $input_file
#mv tmp-perf.csv ${NPF_ROOT}/perf-normalized.csv


#============================================================================================#


%pqos:script@dut sudo=true name=profiler autokill=false waitfor=GEN_BEGIN delay=0

// Enabling MSR
modprobe msr 

// Setup CAT configuration
echo "Resetting CAT"
pqos -R

// Run PQOS monitoring
bash pqos.sh

%pqos:script@dut sudo=true name=pqos-parser autokill=true waitfor=GEN_DONE delay=0

// Processing pqos output
echo "Launching PQOS script"
bash pqos-processing.sh $PQOS_OUTPUT
rm -f $PQOS_OUTPUT


%file@dut pqos.sh

#============================================================================================#
# pqos.sh : Script to launch pqos
#============================================================================================#

echo "Launching PQOS"
pqos -m "all:0-$(($PQOS_MAX_CORE))" -o $PQOS_OUTPUT


#============================================================================================#


%file@dut pqos-processing.sh

#============================================================================================#
# pqos-processing.sh : Script to process pqos output to get LLC misses and other events
#============================================================================================#

input_file=$1
monitoring_cores=$(seq 0 $PQOS_MAX_CORE)
column=$(seq 2 6)
column_name=("NA" "RESULT-CORE" "RESULT-IPC" "RESULT-LLCMISSES" "RESULT-LLCOCCUPANCY" "RESULT-MBL" "RESULT-MBR")
column_scale=(" " " " " " "k" "KB" "MB/s" "MB/s")


for c in $monitoring_cores; do
	for col in $column;do

	#Sum
	result=`cat $input_file\
	| awk -v core=$c '{if($1!="TIME" && $1==core) print $0}'\
	| awk -v column=$col '{print $column}'\
	| awk '{ total +=$1;count++;} END{print total}'`
	echo ${column_name[$col]}"-sum-C"$c" "$result" "${column_scale[$col]}

	#Average
	result=`cat $input_file\
	| awk -v core=$c '{if($1!="TIME" && $1==core) print $0}'\
	| awk -v column=$col '{print $column}'\
	| awk '{ total +=$1;count++;} END{print total/count}'`
	echo ${column_name[$col]}"-avg-C"$c" "$result" "${column_scale[$col]}

	# #Median
	# result=`cat $input_file\
	# | awk -v core=$c '{if($1!="TIME" && $1==core) print $0}'\
	# | awk -v column=$col '{print $column}'\
	# | awk 'BEGIN{max=0}{if ($1>max) max=$1; fi} END{print max/1k}'\
	# | sort -n \
	# | awk '{ a[i++]=$1; }END { x=int((i+1)/2); if (x < (i+1)/2) print (a[x-1]+a[x])/2; else print a[x-1];}'`
	# echo ${column_name[$col]}"-median-C"$c" "$result" "${column_scale[$col]}

	# #Maximum
	# result=`cat $input_file\
	# | awk -v core=$c '{if($1!="TIME" && $1==core) print $0}'\
	# | awk -v column=$col '{print $column}'\
	# | awk 'BEGIN{max=0}{if ($1>max) max=$1; fi} END{print max/1k}'`
	# echo ${column_name[$col]}"-max-C"$c" "$result" "${column_scale[$col]}
	
	done
done

#============================================================================================#

%dual:import@client2 fastclick-replay-single-mt2 trace=/mnt/20190507.morning.merged.ip.anon.nopayload.pcap waitfor=COMPILED TIMING=$TIMING LIMIT=2000000 SND_NIC=0 RCV_NIC=0 PKTGEN_REPLAY_COUNT=25 autokill=false
%-udp:import@client fastclick-replay-single-mt trace=/mnt/traces/merged.transformed.pcap waitfor=COMPILED TIMING=$TIMING LIMIT=2000000 SND_NIC=0 RCV_NIC=0 PKTGEN_REPLAY_COUNT=25 autokill=false
//%udp:import@client fastclick-udpgen-latency-single delay=5 waitfor=COMPILED LIMIT=2000000 SND_NIC=0 RCV_NIC=0 PKTGEN_REPLAY_COUNT=25 autokill=false GEN_THREADS=4 GEN_LENGTH=$GEN_LENGTH
%udp:import@client fastclick-replay-single-mt delay=5 waitfor=COMPILED LIMIT=1000000 SND_NIC=0 RCV_NIC=0 PKTGEN_REPLAY_COUNT=50 autokill=false GEN_THREADS=4 GEN_RX_THREADS=4 GEN_LENGTH=$GEN_LENGTH



//Import app-sepecific files

%include packetmill.d/l2fwd.npf
%include packetmill.d/bess.npf
%include packetmill.d/vpp.npf
%include packetmill.d/fastclick.npf
%include packetmill.d/freq.npf

%require
test $MINDRIVER -eq 1 || test $EMBED -eq 0

//%opt:require
//test $LLVM -eq 1

