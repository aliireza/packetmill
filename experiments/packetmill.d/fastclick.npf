%ids:file@dut IDS
elementclass IDS {
    [0]
    -> CheckIPHeader(OFFSET 14, CHECKSUM false)
    -> ipc :: IPClassifier(tcp,udp,icmp,-);

    ipc[0]
        -> CheckTCPHeader(CHECKSUM $CHKSUM)
        -> output;

    ipc[1]
        -> CheckUDPHeader(CHECKSUM $CHKSUM)
        -> output;

    ipc[2]
        -> CheckICMPHeader()
        -> output;

    ipc[3]
        -> output;
}

%-ids:file@dut IDS
elementclass IDS {
    [0] -> [0]
}
%nat:file@dut NAT
elementclass NAT {
    [0]
    -> FlowIPManagerIMP(CAPACITY $NAT_CAPA)
    -> FlowIPNAT(SIP 10.0.0.1)
    -> FlowCounter
    ->  [0]
}

%-nat:file@dut NAT
elementclass NAT {
    [0] -> [0]
}

%fwd:file@dut FNT
elementclass FNT { [0]
    -> EtherRewrite(SRC ${dut:0:mac}, DST ${client:0:mac})
    -> [0] }

%fwd:file@dut FNT2
elementclass FNT2 { [0]
    -> EtherRewrite(SRC ${dut:2:mac}, DST ${client2:0:mac})
    -> [0] }

%router:file@dut FNT
    define ($MTU 1500)
    define ($ip 10.0.0.1)
    define ($eth ${dut:0:mac})
elementclass FNT { 
    tol :: Discard(); //ToHost normally

input[0] ->
            c0 :: Classifier(    12/0806 20/0001,
                                 12/0806 20/0002,
                                 12/0800,
                                 -);

        // Respond to ARP Query
        c0[0] -> arpress :: ARPResponder($ip $eth);
        arpress[0] -> Print("ARP QUERY") -> [0]output;

        // Deliver ARP responses to ARP queriers as well as Linux.
        t :: Tee(2);
        c0[1] -> t;
        t[0] -> Print("Input to linux") -> tol; //To linux
        t[1] -> Print("Arp response") -> [0]output; //Directly output

  
        // Unknown ethernet type numbers.
        c0[3] -> Print() -> Discard();

        
    // An "ARP querier" for each interface.
    arpq0 :: EtherEncap(0x0800, ${dut:0:mac}, ${client:0:mac});
    // Connect ARP outputs to the interface queues.
    arpq0 -> [0]output;

    // IP routing table.
    rt :: LookupIPRouteMP(   0.0.0.0/0 0);

    // Hand incoming IP packets to the routing table.
    // CheckIPHeader checks all the lengths and length fields
    // for sanity.
    ip ::

    Strip(14)
    -> CheckIPHeader(CHECKSUM false, VERBOSE false)
    -> [0]rt;

    oerror :: IPPrint("ICMP Error : DF") -> [0]rt;
    ttlerror :: IPPrint("ICMP Error : TTL") -> [0]rt;
    //rederror :: IPPrint("ICMP Error : Redirect") -> [0]rt;


    c0[2] -> Paint(1) -> ip;
    rt[0] -> output0 :: IPOutputCombo(2, 10.1.0.1, $MTU);
    // DecIPTTL[1] emits packets with expired TTLs.
    // Reply with ICMPs. Rate-limit them?
    output0[3] -> ICMPError(10.1.0.1, timeexceeded, SET_FIX_ANNO 0) -> ttlerror;
    // Send back ICMP UNREACH/NEEDFRAG messages on big packets with DF set.
    // This makes path mtu discovery work.
    output0[4] -> ICMPError(10.1.0.1, unreachable, needfrag, SET_FIX_ANNO 0) -> oerror;
    // Send back ICMP Parameter Problem messages for badly formed
    // IP options. Should set the code to point to the
    // bad byte, but that's too hard.
    output0[2] -> ICMPError(10.1.0.1, parameterproblem, SET_FIX_ANNO 0) -> oerror;
    // Send back an ICMP redirect if required.
    output0[1] -> ICMPError(10.1.0.1, redirect, host, SET_FIX_ANNO 0) -> IPPrint("ICMP Error : Redirect") -> arpq0;
    output0[0]
    $WP
    -> NAT()
    -> arpq0;
}


%router:file@dut FNT2
    define ($MTU2 1500)
    define ($ip2 10.0.0.2)
    define ($eth2 ${dut:2:mac})
elementclass FNT2 { 
    tol :: Discard(); //ToHost normally

input[0] ->
            c0 :: Classifier(    12/0806 20/0001,
                                 12/0806 20/0002,
                                 12/0800,
                                 -);

        // Respond to ARP Query
        c0[0] -> arpress :: ARPResponder($ip2 $eth2);
        arpress[0] -> Print("ARP QUERY") -> [0]output;

        // Deliver ARP responses to ARP queriers as well as Linux.
        t :: Tee(2);
        c0[1] -> t;
        t[0] -> Print("Input to linux") -> tol; //To linux
        t[1] -> Print("Arp response") -> [0]output; //Directly output

  
        // Unknown ethernet type numbers.
        c0[3] -> Print() -> Discard();

        
    // An "ARP querier" for each interface.
    arpq0 :: EtherEncap(0x0800, ${dut:2:mac}, ${client2:0:mac});
    // Connect ARP outputs to the interface queues.
    arpq0 -> [0]output;

    // IP routing table.
    rt :: LookupIPRouteMP(   0.0.0.0/0 0);

    // Hand incoming IP packets to the routing table.
    // CheckIPHeader checks all the lengths and length fields
    // for sanity.
    ip ::

    Strip(14)
    -> CheckIPHeader(CHECKSUM false, VERBOSE false)
    -> [0]rt;

    oerror :: IPPrint("ICMP Error : DF") -> [0]rt;
    ttlerror :: IPPrint("ICMP Error : TTL") -> [0]rt;
    //rederror :: IPPrint("ICMP Error : Redirect") -> [0]rt;


    c0[2] -> Paint(1) -> ip;
    rt[0] -> output0 :: IPOutputCombo(2, 10.1.0.1, $MTU2);
    // DecIPTTL[1] emits packets with expired TTLs.
    // Reply with ICMPs. Rate-limit them?
    output0[3] -> ICMPError(10.1.0.1, timeexceeded, SET_FIX_ANNO 0) -> ttlerror;
    // Send back ICMP UNREACH/NEEDFRAG messages on big packets with DF set.
    // This makes path mtu discovery work.
    output0[4] -> ICMPError(10.1.0.1, unreachable, needfrag, SET_FIX_ANNO 0) -> oerror;
    // Send back ICMP Parameter Problem messages for badly formed
    // IP options. Should set the code to point to the
    // bad byte, but that's too hard.
    output0[2] -> ICMPError(10.1.0.1, parameterproblem, SET_FIX_ANNO 0) -> oerror;
    // Send back an ICMP redirect if required.
    output0[1] -> ICMPError(10.1.0.1, redirect, host, SET_FIX_ANNO 0) -> IPPrint("ICMP Error : Redirect") -> arpq0;
    output0[0]
    $WP
    -> NAT()
    -> arpq0;
}



%-dpdk,-bess,-vpp:script@dut sudo=true

sudo killall bessd

echo "PERF is" $PERF

if [ "$RAND_SEED" = "random" ] ; then
    export CLICK_ELEM_RAND_SEED=$RANDOM
else
    export CLICK_ELEM_RAND_SEED=$RAND_SEED
fi

echo "RAND_SEED is $CLICK_ELEM_RAND_SEED"

// Setting RAND
export CLICK_ELEM_RAND_MAX=$RAND_MAX

sudo cpupower --cpu 0-\$(( $(nproc) - 1)) frequency-set -d 1200M -u 3700M

echo "" > CONFIGBASE
cat IDS >> CONFIGBASE
cat NAT >> CONFIGBASE
cat FNT >> CONFIGBASE
if [ $dualNIC -eq 1 ] ; then
    cat FNT2 >> CONFIGBASE
fi
cat MCONFIG >> CONFIGBASE

FASTCLICK_BIN_PATH=$(which click)
echo "Bin path is $FASTCLICK_BIN_PATH"
FASTCLICK_PATH=$(realpath $(dirname $FASTCLICK_BIN_PATH)/../)

echo "Click path is $FASTCLICK_PATH"

BIN=click

if [ $DEVIRTUALIZE -eq 1 -o $MINDRIVER -eq 1 ] ; then
    pushd ${FASTCLICK_PATH}
        sudo make clean-embed
        echo "Uninstalling.."
        sudo make uninstall &> /dev/null
        git checkout doc
        sudo make install
    popd
fi

if [ $DEVIRTUALIZE -eq 1 ] ; then
    TINLINE=
    TSTATIC=
    TREPLACE=
    TUNROLL=
    TSWITCH=
    TJMPS=
    TALIGN=
    if [ $INLINE -eq 1 ] ; then
        TINLINE=--inline
        echo "Enabling Inline Pass"
    fi
    if [ $STATIC -eq 1 ] ; then
        TSTATIC=--static
        echo "Enabling Static Pass"
    fi
    if [ $REPLACE -eq 1 ] ; then
        TREPLACE=--replace
        echo "Enabling Replace Pass"
    fi
    if [ $UNROLL -eq 1 ] ; then
        TUNROLL=--unroll
        TUNROLL+=" "
        TUNROLL+=$UNROLL_FACTOR
        echo "Enabling Unroll Pass"
    fi
    if [ $SWITCH -eq 1 ] ; then
        TSWITCH=--switch
        TSWITCH+=" "
        TSWITCH+=$BURST
        echo "Enabling Switch Pass"
    fi
    if [ $JMPS -eq 1 ] ; then
        TJMPS=--jmps
        TJMPS+=" "
        TJMPS+=$BURST
        echo "Enabling JMP Pass"
    fi
    if [ $ALIGN -eq 1 ] ; then
        TALIGN=--alignas
        TALIGN+=" "
        TALIGN+=$ALIGN_SIZE
        echo "Enabling alignas Pass"
    fi
    echo "Running ${FASTCLICK_PATH}/bin/click-devirtualize CONFIGBASE $TREPLACE $TSTATIC $TINLINE $TUNROLL $TSWITCH $TJMPS $TALIGN > package.uo"
    ${FASTCLICK_PATH}/bin/click-devirtualize CONFIGBASE $TREPLACE $TSTATIC $TINLINE $TUNROLL $TSWITCH $TJMPS $TALIGN > package.uo
    ar x package.uo config
    cp config CONFIGDEV
    CFGN=package.uo
    CFG=CONFIGDEV
else
    CFGN=CONFIGBASE
    CFG=CONFIGBASE
fi

if [ $MINDRIVER -eq 1 ] ; then
    echo "Making click-embed in $(pwd)"
    BIN=embedclick
    if [ $EMBED -eq 1 ] ; then
        cat CONFIGDEV | tail -n +2 > C
        cp C CONFIGDEV
        SHIP=--ship
    else
        SHIP=
    fi
    sp=$(pwd)
    pushd ${FASTCLICK_PATH}/userlevel/
    ${FASTCLICK_PATH}/bin/click-mkmindriver -V -C ${FASTCLICK_PATH} -p embed $SHIP -u $sp/$CFGN || exit 1
    echo "Building embedded binary..."
    make ${BIN} MINDRIVER=embed STATIC=$STATIC V=1 || exit 1
    popd
fi

if [ $OPT -eq 1 ] ; then
    echo "Making LLVM pass..."
    pushd ${FASTCLICK_PATH}
    pushd userlevel
    if [ $LTOOPT -eq 1 ] ; then
        llvm-dis ${BIN}.0.5.precodegen.bc -o ${BIN}.ll
    else
        llvm-dis ${BIN}.0.0.preopt.bc -o ${BIN}.ll
    fi
    if [ $OPT_STRIP -eq 1 ] ; then
        opt -S -load ${LLVM_PASS_PATH}/build/class-stripmoduleflags-pass/libClassStripModuleFlagsPass.so -strip-module-flags ${BIN}.ll -o ${BIN}.ll
    fi
    if [ $OPT_PICK -eq 1 ] ; then
        opt -S -load ${LLVM_PASS_PATH}/build/class-handpick-pass/libClassHandpickPass.so -handpick-packet-class ${BIN}.ll -o ${BIN}.ll
    fi
    if [ $OPT_POOL_INLINE -eq 1 ] ; then
        opt -S -load ${LLVM_PASS_PATH}/build/class-pool-inline-pass/libClassPoolInlinePass.so  -inline-pool ${BIN}.ll -o ${BIN}.ll
    fi
    opt -S -O3 ${BIN}.ll -o ${BIN}.ll
    if [ $EMBED -eq 1 ] ; then
        make embedclick-opt STATIC=$STATIC V=1
        BIN=embedclick-opt
    else
        make click-opt STATIC=$STATIC V=1
        BIN=click-opt
    fi
    popd
    popd
fi

echo "EVENT COMPILED"

// Setting RTE_SDK
export RTE_SDK=$XCHG_PATH
export XCHG_SDK=$XCHG_PATH


if [ $BOLT -eq 1 ] ; then
    // Converting Perf data to bolt
    ${DUT_BOLT_PATH}/perf2bolt -p ${NPF_ROOT}/perf.data.bolt -o ${NPF_ROOT}/perf.fdata ${FASTCLICK_PATH}/userlevel/$BIN
    ${DUT_BOLT_PATH}/llvm-bolt ${FASTCLICK_PATH}/userlevel/$BIN -o ${FASTCLICK_PATH}/userlevel/$BIN.bolt -data=${NPF_ROOT}/perf.fdata -reorder-blocks=cache+ -reorder-functions=hfsort -split-functions=2 -split-all-cold -split-eh -dyno-stats

    echo "EVENT COMPILED"
    echo "Launching $BIN.bolt at ${FASTCLICK_PATH} with config $CFG in $(pwd)"
    $GDB ${FASTCLICK_PATH}/userlevel/$BIN.bolt --dpdk -w ${dut:0:pci}${MLX_OPT} -w ${dut:2:pci}${MLX_OPT} -l 0-$(( $DPDK_CPU - 1 )) -- $CFG
else
    echo "EVENT COMPILED"
    echo "Launching $BIN at ${FASTCLICK_PATH} with config $CFG in $(pwd)"
    $GDB $PERF ${FASTCLICK_PATH}/userlevel/$BIN --dpdk -w ${dut:0:pci}${MLX_OPT} $(( "-w ${dut:2:pci}${MLX_OPT}" if $dualNIC else "" )) -l 0-$(( $DPDK_CPU - 1 )) -- $CFG
fi

%file@dut MCONFIG
//DPDKInfo(MBUF_CACHE_SIZE $MCACHE)

fd0 :: $FD(0, MAXTHREADS $CPU , BURST $BURST , TIMESTAMP false, PAUSE $PAUSE, CLEAR $CLEAR, NDESC $RXDESC)
    $INITVLAN
    -> IDS()
//    -> SetCycleCount()
    -> FNT()
//    -> accum :: CycleCountAccum()
    $SETVLAN
    -> $TD(${dut:0:pci}, NDESC $TXDESC, BLOCKING $BLOCKING)

DriverManager(  wait,
  //              print "RESULT-CYCLEPP $(accum.cycles_pp)",
                read fd0.xstats,
                )

%dual:file@dut MCONFIG
fd0 :: $FD(${dut:0:pci}, MAXTHREADS $CPU , BURST $BURST , TIMESTAMP false, PAUSE $PAUSE, CLEAR $CLEAR, NDESC $RXDESC)
fd1 :: $FD(${dut:2:pci}, MAXTHREADS $CPU , BURST $BURST , TIMESTAMP false, PAUSE $PAUSE, CLEAR $CLEAR, NDESC $RXDESC)
td0 :: $TD(${dut:0:pci}, NDESC $TXDESC, BLOCKING $BLOCKING)
td1 :: $TD(${dut:2:pci}, NDESC $TXDESC, BLOCKING $BLOCKING)

ids1 :: IDS()
ids2 :: IDS()

   fd0 
    $INITVLAN
    -> ids1
//    -> SetCycleCount()
    -> FNT()
//    -> accum :: CycleCountAccum()
    $SETVLAN
    -> td0

   fd1
    $INITVLAN
    -> ids2
//    -> SetCycleCount()
    -> FNT2()
//    -> accum :: CycleCountAccum()
    $SETVLAN
    -> td1

DriverManager(  wait,
  //              print "RESULT-CYCLEPP $(accum.cycles_pp)",
                read fd0.xstats,
                )

